{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","components/searchbox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","type","placeholder","onChange","React","require","request","App","state","searchField","storeSearchField","bind","get","err","res","body","users","JSON","parse","setState","e","this","target","value","toLowerCase","filter","includes","filterMonstersBySearchField","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iiBAIe,SAASA,EAAKC,GAC3B,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,QCJT,SAASC,EAASR,GAC/B,OACE,yBAAKC,UAAU,YACZD,EAAMS,SAASC,KACd,SAAAN,GAAO,OAAI,kBAACL,EAAD,CAAMY,IAAKP,EAAQC,GAAID,QAASA,Q,OCLpC,SAASQ,EAAUZ,GAChC,OACE,2BAAOC,UAAU,SAASY,KAAK,OAAOC,YAAad,EAAMc,YAAaC,SAAUf,EAAMe,WCD1F,IAAMC,EAAQC,EAAQ,IAChBC,EAAUD,EAAQ,KA2CTE,E,YAxCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXX,SAAU,GACVY,YAAa,IAGf,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBARZ,E,kFAWQ,IAAD,OACnBL,EAAQM,IAAI,8CAA8C,SAACC,EAAKC,EAAKC,GACnE,IAAIC,EAAQC,KAAKC,MAAMH,GACvB,EAAKI,SAAS,CAACtB,SAAUmB,S,uCAIZI,GACfC,KAAKF,SAAS,CAACV,YAAaW,EAAEE,OAAOC,MAAMC,kB,oDAGd,IAAD,EACIH,KAAKb,MAA9BX,EADqB,EACrBA,SAAUY,EADW,EACXA,YACjB,OAAOZ,EAAS4B,QACd,SAAAjC,GAAO,OAAIA,EAAQE,KAAK8B,cAAcE,SAASjB,Q,+BAKjD,OACE,uBAAKpB,UAAU,OACb,8CACA,gBAACW,EAAD,CAAWE,YAAY,iBAAiBC,SAAUkB,KAAKX,mBACvD,gBAACd,EAAD,CAAUC,SAAUwB,KAAKM,qC,GAnCfvB,EAAMwB,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8f0d672.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css'\r\n\r\nexport default function Card(props) {\r\n  return (\r\n    <div className='card-container'>\r\n      <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport './cardlist.styles.css';\r\nimport Card from '../card/card.component';\r\n\r\nexport default function CardList(props) {\r\n  return (\r\n    <div className='cardlist'>\r\n      {props.monsters.map(\r\n        monster => <Card key={monster.id} monster={monster}/>\r\n      )}\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport default function SearchBox(props) {\r\n  return (\r\n    <input className='search' type='text' placeholder={props.placeholder} onChange={props.onChange}/>\r\n  );\r\n}","import './App.css';\r\n\r\nimport CardList from './components/cardlist/cardlist.component';\r\nimport SearchBox from './components/searchbox/searchbox.component';\r\n\r\nconst React = require('react');\r\nconst request = require('request');\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: '',\r\n    };\r\n\r\n    this.storeSearchField = this.storeSearchField.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    request.get('https://jsonplaceholder.typicode.com/users', (err, res, body) => {\r\n      let users = JSON.parse(body);\r\n      this.setState({monsters: users});\r\n    });\r\n  }\r\n\r\n  storeSearchField(e) {\r\n    this.setState({searchField: e.target.value.toLowerCase()});\r\n  }\r\n\r\n  filterMonstersBySearchField() {\r\n    const {monsters, searchField} = this.state;\r\n    return monsters.filter(\r\n      monster => monster.name.toLowerCase().includes(searchField)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox placeholder='search monster' onChange={this.storeSearchField}/>\r\n        <CardList monsters={this.filterMonstersBySearchField()} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}